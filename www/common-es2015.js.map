{"version":3,"sources":["./node_modules/@ionic/core/dist/esm/button-active-a6787d69.js","./node_modules/@ionic/core/dist/esm/framework-delegate-4584ab5a.js","./node_modules/@ionic/core/dist/esm/haptic-27b3f981.js","./node_modules/@ionic/core/dist/esm/spinner-configs-cd7845af.js","./node_modules/@ionic/core/dist/esm/theme-ff3fc52f.js","./src/app/components/popover-category/popover-category.page.html","./src/app/pages/add/add.page.html","./src/app/components/popover-category/popover-category.page.scss","./src/app/components/popover-category/popover-category.page.ts","./src/app/pages/add/add.page.scss","./src/app/pages/add/add.page.ts","./src/models/todo.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqD;AACD;AACmE;;AAEvH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,4DAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,4DAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,wEAAa;AACtB;AACA;AACA;AACA,mEAAmE,qDAAoB;AACvF,kEAAkE,qDAAsB;AACxF;AACA;AACA,MAAM,6DAAkB;AACxB;AACA;AACA,GAAG;AACH;;AAE0C;;;;;;;;;;;;;AC/D1C;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEsD;;;;;;;;;;;;;ACjCtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,QAAQ;AACjC,GAAG;AACH;AACA,iBAAiB,iBAAiB;AAClC,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,iBAAiB;AACpD;AACA;AACA;AACA;;AAEoI;;;;;;;;;;;;;ACzGpI;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA,gCAAgC,4BAA4B;AAC5D;AACA;AACA;AACA;AACA,oBAAoB,oBAAoB;AACxC,qBAAqB,oBAAoB;AACzC;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,gCAAgC,mBAAmB;AACnD;AACA;AACA;AACA;AACA,oBAAoB,oBAAoB;AACxC,qBAAqB,oBAAoB;AACzC;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,gBAAgB;AACrC;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,kCAAkC,sCAAsC;AACxE,gCAAgC,4BAA4B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,kCAAkC,sCAAsC;AACxE,gCAAgC,4BAA4B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEyB;;;;;;;;;;;;;AC7GzB;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E,kCAAkC,MAAM,UAAU;AAC5H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEqF;;;;;;;;;;;;;ACtCrF;AAAe,yPAA0L,UAAU,+BAA+B,E;;;;;;;;;;;;ACAlP;AAAe,u0EAAwwE,UAAU,0qCAA0qC,UAAU,siBAAsiB,+GAA+G,E;;;;;;;;;;;;ACA1mI;AAAe,6GAA8C,+KAA+K,E;;;;;;;;;;;;;;;;;;ACA7L;AACiB;IAQnD,mBAAmB,SAAnB,mBAAmB;IAG9B,YAAmB,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;IAAI,CAAC;CAEjD;;YAbO,uEAAW;;;mBAShB,mDAAK;;AADK,mBAAmB;IAL/B,+DAAS,CAAC;QACT,QAAQ,EAAE,sBAAsB;QAChC,6PAA2C;;KAE5C,CAAC;GACW,mBAAmB,CAK/B;AAL+B;;;;;;;;;;;;;ACThC;AAAe,6GAA8C,uIAAuI,E;;;;;;;;;;;;;;;;;;;;ACArJ;AACiB;AACtB;AACK;IASlC,OAAO,SAAP,OAAO;IAWhB,YAAmB,WAAwB,EACxB,SAA0B;QAD1B,gBAAW,GAAX,WAAW,CAAa;QACxB,cAAS,GAAT,SAAS,CAAiB;QAVpC,SAAI,GAAS,IAAI,iDAAI,EAAE,CAAC;QAMzB,WAAM,GAAG,MAAM,CAAC;IAKxB,CAAC;IAED;;;OAGG;IACH,cAAc,CAAC,EAAO;QAClB,OAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAAC;IACvC,CAAC;CACJ;;YAjCO,uEAAW;YAEX,8DAAe;;;mBAWlB,mDAAK;oBACL,mDAAK;mBACL,mDAAK;uBACL,mDAAK;mBACL,mDAAK;;AANG,OAAO;IALnB,+DAAS,CAAC;QACP,QAAQ,EAAE,SAAS;QACnB,iNAA8B;;KAEjC,CAAC;GACW,OAAO,CAsBnB;AAtBmB;;;;;;;;;;;;;ACZpB;AAAA;AAAA;AAAsC;AAG/B,MAAM,IAAI;IAAjB;QAIW,cAAS,GAAc,IAAI,oDAAS,CAAC,qBAAqB,EAAE,qBAAqB,CAAC,CAAC;QAEnF,aAAQ,GAAG,KAAK,CAAC;QACjB,eAAU,GAAG,CAAC,CAAC;QAGtB;;;;;WAKG;IACP,CAAC;CAAA","file":"common-es2015.js","sourcesContent":["import { c as writeTask } from './index-e806d1f6.js';\nimport { createGesture } from './index-f49d994d.js';\nimport { h as hapticSelectionEnd, a as hapticSelectionStart, b as hapticSelectionChanged } from './haptic-27b3f981.js';\n\nconst createButtonActiveGesture = (el, isButton) => {\n  let currentTouchedButton;\n  let initialTouchedButton;\n  const activateButtonAtPoint = (x, y, hapticFeedbackFn) => {\n    if (typeof document === 'undefined') {\n      return;\n    }\n    const target = document.elementFromPoint(x, y);\n    if (!target || !isButton(target)) {\n      clearActiveButton();\n      return;\n    }\n    if (target !== currentTouchedButton) {\n      clearActiveButton();\n      setActiveButton(target, hapticFeedbackFn);\n    }\n  };\n  const setActiveButton = (button, hapticFeedbackFn) => {\n    currentTouchedButton = button;\n    if (!initialTouchedButton) {\n      initialTouchedButton = currentTouchedButton;\n    }\n    const buttonToModify = currentTouchedButton;\n    writeTask(() => buttonToModify.classList.add('ion-activated'));\n    hapticFeedbackFn();\n  };\n  const clearActiveButton = (dispatchClick = false) => {\n    if (!currentTouchedButton) {\n      return;\n    }\n    const buttonToModify = currentTouchedButton;\n    writeTask(() => buttonToModify.classList.remove('ion-activated'));\n    /**\n     * Clicking on one button, but releasing on another button\n     * does not dispatch a click event in browsers, so we\n     * need to do it manually here. Some browsers will\n     * dispatch a click if clicking on one button, dragging over\n     * another button, and releasing on the original button. In that\n     * case, we need to make sure we do not cause a double click there.\n     */\n    if (dispatchClick && initialTouchedButton !== currentTouchedButton) {\n      currentTouchedButton.click();\n    }\n    currentTouchedButton = undefined;\n  };\n  return createGesture({\n    el,\n    gestureName: 'buttonActiveDrag',\n    threshold: 0,\n    onStart: ev => activateButtonAtPoint(ev.currentX, ev.currentY, hapticSelectionStart),\n    onMove: ev => activateButtonAtPoint(ev.currentX, ev.currentY, hapticSelectionChanged),\n    onEnd: () => {\n      clearActiveButton(true);\n      hapticSelectionEnd();\n      initialTouchedButton = undefined;\n    }\n  });\n};\n\nexport { createButtonActiveGesture as c };\n","const attachComponent = async (delegate, container, component, cssClasses, componentProps) => {\n  if (delegate) {\n    return delegate.attachViewToDom(container, component, componentProps, cssClasses);\n  }\n  if (typeof component !== 'string' && !(component instanceof HTMLElement)) {\n    throw new Error('framework delegate is missing');\n  }\n  const el = (typeof component === 'string')\n    ? container.ownerDocument && container.ownerDocument.createElement(component)\n    : component;\n  if (cssClasses) {\n    cssClasses.forEach(c => el.classList.add(c));\n  }\n  if (componentProps) {\n    Object.assign(el, componentProps);\n  }\n  container.appendChild(el);\n  if (el.componentOnReady) {\n    await el.componentOnReady();\n  }\n  return el;\n};\nconst detachComponent = (delegate, element) => {\n  if (element) {\n    if (delegate) {\n      const container = element.parentElement;\n      return delegate.removeViewFromDom(container, element);\n    }\n    element.remove();\n  }\n  return Promise.resolve();\n};\n\nexport { attachComponent as a, detachComponent as d };\n","const HapticEngine = {\n  getEngine() {\n    const win = window;\n    return (win.TapticEngine) || (win.Capacitor && win.Capacitor.isPluginAvailable('Haptics') && win.Capacitor.Plugins.Haptics);\n  },\n  available() {\n    return !!this.getEngine();\n  },\n  isCordova() {\n    return !!window.TapticEngine;\n  },\n  isCapacitor() {\n    const win = window;\n    return !!win.Capacitor;\n  },\n  impact(options) {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    const style = this.isCapacitor() ? options.style.toUpperCase() : options.style;\n    engine.impact({ style });\n  },\n  notification(options) {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    const style = this.isCapacitor() ? options.style.toUpperCase() : options.style;\n    engine.notification({ style });\n  },\n  selection() {\n    this.impact({ style: 'light' });\n  },\n  selectionStart() {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    if (this.isCapacitor()) {\n      engine.selectionStart();\n    }\n    else {\n      engine.gestureSelectionStart();\n    }\n  },\n  selectionChanged() {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    if (this.isCapacitor()) {\n      engine.selectionChanged();\n    }\n    else {\n      engine.gestureSelectionChanged();\n    }\n  },\n  selectionEnd() {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    if (this.isCapacitor()) {\n      engine.selectionEnd();\n    }\n    else {\n      engine.gestureSelectionEnd();\n    }\n  }\n};\n/**\n * Trigger a selection changed haptic event. Good for one-time events\n * (not for gestures)\n */\nconst hapticSelection = () => {\n  HapticEngine.selection();\n};\n/**\n * Tell the haptic engine that a gesture for a selection change is starting.\n */\nconst hapticSelectionStart = () => {\n  HapticEngine.selectionStart();\n};\n/**\n * Tell the haptic engine that a selection changed during a gesture.\n */\nconst hapticSelectionChanged = () => {\n  HapticEngine.selectionChanged();\n};\n/**\n * Tell the haptic engine we are done with a gesture. This needs to be\n * called lest resources are not properly recycled.\n */\nconst hapticSelectionEnd = () => {\n  HapticEngine.selectionEnd();\n};\n/**\n * Use this to indicate success/failure/warning to the user.\n * options should be of the type `{ style: 'light' }` (or `medium`/`heavy`)\n */\nconst hapticImpact = (options) => {\n  HapticEngine.impact(options);\n};\n\nexport { hapticSelectionStart as a, hapticSelectionChanged as b, hapticSelection as c, hapticImpact as d, hapticSelectionEnd as h };\n","const spinners = {\n  'bubbles': {\n    dur: 1000,\n    circles: 9,\n    fn: (dur, index, total) => {\n      const animationDelay = `${(dur * index / total) - dur}ms`;\n      const angle = 2 * Math.PI * index / total;\n      return {\n        r: 5,\n        style: {\n          'top': `${9 * Math.sin(angle)}px`,\n          'left': `${9 * Math.cos(angle)}px`,\n          'animation-delay': animationDelay,\n        }\n      };\n    }\n  },\n  'circles': {\n    dur: 1000,\n    circles: 8,\n    fn: (dur, index, total) => {\n      const step = index / total;\n      const animationDelay = `${(dur * step) - dur}ms`;\n      const angle = 2 * Math.PI * step;\n      return {\n        r: 5,\n        style: {\n          'top': `${9 * Math.sin(angle)}px`,\n          'left': `${9 * Math.cos(angle)}px`,\n          'animation-delay': animationDelay,\n        }\n      };\n    }\n  },\n  'circular': {\n    dur: 1400,\n    elmDuration: true,\n    circles: 1,\n    fn: () => {\n      return {\n        r: 20,\n        cx: 48,\n        cy: 48,\n        fill: 'none',\n        viewBox: '24 24 48 48',\n        transform: 'translate(0,0)',\n        style: {}\n      };\n    }\n  },\n  'crescent': {\n    dur: 750,\n    circles: 1,\n    fn: () => {\n      return {\n        r: 26,\n        style: {}\n      };\n    }\n  },\n  'dots': {\n    dur: 750,\n    circles: 3,\n    fn: (_, index) => {\n      const animationDelay = -(110 * index) + 'ms';\n      return {\n        r: 6,\n        style: {\n          'left': `${9 - (9 * index)}px`,\n          'animation-delay': animationDelay,\n        }\n      };\n    }\n  },\n  'lines': {\n    dur: 1000,\n    lines: 12,\n    fn: (dur, index, total) => {\n      const transform = `rotate(${30 * index + (index < 6 ? 180 : -180)}deg)`;\n      const animationDelay = `${(dur * index / total) - dur}ms`;\n      return {\n        y1: 17,\n        y2: 29,\n        style: {\n          'transform': transform,\n          'animation-delay': animationDelay,\n        }\n      };\n    }\n  },\n  'lines-small': {\n    dur: 1000,\n    lines: 12,\n    fn: (dur, index, total) => {\n      const transform = `rotate(${30 * index + (index < 6 ? 180 : -180)}deg)`;\n      const animationDelay = `${(dur * index / total) - dur}ms`;\n      return {\n        y1: 12,\n        y2: 20,\n        style: {\n          'transform': transform,\n          'animation-delay': animationDelay,\n        }\n      };\n    }\n  }\n};\nconst SPINNERS = spinners;\n\nexport { SPINNERS as S };\n","const hostContext = (selector, el) => {\n  return el.closest(selector) !== null;\n};\n/**\n * Create the mode and color classes for the component based on the classes passed in\n */\nconst createColorClasses = (color, cssClassMap) => {\n  return (typeof color === 'string' && color.length > 0) ? Object.assign({ 'ion-color': true, [`ion-color-${color}`]: true }, cssClassMap) : cssClassMap;\n};\nconst getClassList = (classes) => {\n  if (classes !== undefined) {\n    const array = Array.isArray(classes) ? classes : classes.split(' ');\n    return array\n      .filter(c => c != null)\n      .map(c => c.trim())\n      .filter(c => c !== '');\n  }\n  return [];\n};\nconst getClassMap = (classes) => {\n  const map = {};\n  getClassList(classes).forEach(c => map[c] = true);\n  return map;\n};\nconst SCHEME = /^[a-z][a-z0-9+\\-.]*:/;\nconst openURL = async (url, ev, direction, animation) => {\n  if (url != null && url[0] !== '#' && !SCHEME.test(url)) {\n    const router = document.querySelector('ion-router');\n    if (router) {\n      if (ev != null) {\n        ev.preventDefault();\n      }\n      return router.push(url, direction, animation);\n    }\n  }\n  return false;\n};\n\nexport { createColorClasses as c, getClassMap as g, hostContext as h, openURL as o };\n","export default \"<ion-list>\\n  <ion-list-header>choose category</ion-list-header>\\n  <ion-item *ngFor=\\\"let cat of todoService.categories\\\" button (click)=\\\"todoService.setCategory(task, cat)\\\">\\n    {{cat.name}}\\n  </ion-item>\\n</ion-list>\\n\";","export default \"<ion-header>\\n    <ion-toolbar>\\n        <ion-buttons slot=\\\"end\\\">\\n            <ion-button (click)=\\\"modalCtrl.dismiss()\\\">Abbrechen</ion-button>\\n        </ion-buttons>\\n\\n        <ion-title *ngIf=\\\"!edit\\\">\\n            ToDo erstellen\\n        </ion-title>\\n\\n        <ion-title *ngIf=\\\"edit\\\">\\n            ToDo bearbeiten\\n        </ion-title>\\n    </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n\\n    <!------------------------------------------------------------------------------------>\\n    <!--- Segment Button to toggle ngSwitch between adding a task and adding a category -->\\n    <!------------------------------------------------------------------------------------>\\n\\n    <ion-row *ngIf=\\\"!edit\\\" class=\\\"ion-justify-content-center\\\">\\n        <ion-segment (ionChange)=\\\"segmentChanged($event)\\\" [(ngModel)]=\\\"picked\\\">\\n            <ion-segment-button value=\\\"todo\\\">\\n                <ion-label>ToDo</ion-label>\\n            </ion-segment-button>\\n            <ion-segment-button value=\\\"category\\\">\\n                <ion-label>Category</ion-label>\\n            </ion-segment-button>\\n        </ion-segment>\\n    </ion-row>\\n\\n    <!-------------------------------------------------------------------------------------->\\n    <!------------------------------ ngSwitch case to add a task --------------------------->\\n    <!-------------------------------------------------------------------------------------->\\n\\n    <div [ngSwitch]=\\\"picked\\\">\\n        <div *ngSwitchCase=\\\"'todo'\\\">\\n            <ion-item>\\n                <ion-label position=\\\"floating\\\">ToDo</ion-label>\\n                <ion-input type=\\\"text\\\" [(ngModel)]=\\\"todo.titel\\\"></ion-input>\\n            </ion-item>\\n\\n            <ion-item>\\n                <ion-label position=\\\"floating\\\">Beschreibung</ion-label>\\n                <ion-textarea [(ngModel)]=\\\"todo.beschreibung\\\"></ion-textarea>\\n            </ion-item>\\n\\n            <ion-item *ngIf=\\\"this.todoService.categories.length > 0\\\">\\n                <ion-label>Kategorie</ion-label>\\n                <ion-select interface=\\\"popover\\\"\\n                            [(ngModel)]=\\\"this.todoService.catname\\\">\\n                    <ion-select-option *ngFor=\\\"let cat of this.todoService.categories\\\"\\n                                       [value]=\\\"cat.name\\\">{{cat.name}}\\n                    </ion-select-option>\\n                </ion-select>\\n            </ion-item>\\n            <ion-item>\\n                <ion-button *ngIf=\\\"this.todoService.categories.length === 0\\\" (click)=\\\"this.picked = 'category'\\\">\\n                    Create a Category\\n                </ion-button>\\n            </ion-item>\\n\\n            <ion-button *ngIf=\\\"!edit\\\" (click)=\\\"todoService.add(todo, autor, this.todoService.catname)\\\">\\n                <ion-icon name=\\\"add-outline\\\"></ion-icon>\\n            </ion-button>\\n\\n            <ion-button *ngIf=\\\"edit\\\" (click)=\\\"todoService.edit(todo)\\\">\\n                Speichern\\n            </ion-button>\\n        </div>\\n\\n        <!------------------------------------------------------------------------------------>\\n        <!--------------------------- ngSwitch case to add a category ------------------------>\\n        <!------------------------------------------------------------------------------------>\\n\\n        <div *ngSwitchCase=\\\"'category'\\\">\\n\\n\\n            <ion-list *ngFor=\\\"let cat of todoService.categories\\\">\\n                <ion-item *ngIf=\\\"cat.name !== 'nicht kategorisiert'\\\">\\n                    <h5>{{cat.name}}</h5>\\n\\n                        <ion-icon (click)=\\\"todoService.deleteCategorie(cat)\\\" color=\\\"danger\\\" slot=\\\"end\\\" name=\\\"trash-outline\\\"></ion-icon>\\n\\n                </ion-item>\\n            </ion-list>\\n\\n            <br>\\n\\n            <ion-item>\\n                <ion-label style=\\\"color: grey\\\" position=\\\"floating\\\">Enter a Category Name here</ion-label>\\n                <ion-input type=\\\"text\\\" [(ngModel)]=\\\"name\\\"></ion-input>\\n            </ion-item>\\n\\n            <ion-button *ngIf=\\\"!edit\\\" (click)=\\\"todoService.addCategory(name); name = ''\\\">\\n                Save\\n            </ion-button>\\n        </div>\\n    </div>\\n\\n</ion-content>\\n\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvcG9wb3Zlci1jYXRlZ29yeS9wb3BvdmVyLWNhdGVnb3J5LnBhZ2Uuc2NzcyJ9 */\";","import {Component, Input} from '@angular/core';\nimport {TodoService} from '../../../services/todo/todo.service';\nimport {Todo} from '../../../models/todo';\n\n@Component({\n  selector: 'app-popover-category',\n  templateUrl: './popover-category.page.html',\n  styleUrls: ['./popover-category.page.scss'],\n})\nexport class PopoverCategoryPage {\n  @Input() task: Todo;\n\n  constructor(public todoService: TodoService) { }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2FkZC9hZGQucGFnZS5zY3NzIn0= */\";","import {Component, Input} from '@angular/core';\nimport {TodoService} from '../../../services/todo/todo.service';\nimport {Todo} from '../../../models/todo';\nimport {ModalController} from '@ionic/angular';\nimport {User} from '../../../models/user';\nimport {Kategorie} from '../../../models/kategorie';\n\n@Component({\n    selector: 'app-add',\n    templateUrl: './add.page.html',\n    styleUrls: ['./add.page.scss'],\n})\nexport class AddPage {\n\n    @Input() todo: Todo = new Todo();\n    @Input() autor: User;\n    @Input() edit: boolean;\n    @Input() category: Kategorie;\n    @Input() name: string;\n\n    private picked = 'todo';\n\n\n    constructor(public todoService: TodoService,\n                public modalCtrl: ModalController) {\n    }\n\n    /**\n     *\n     * @param $event that is triggered when the segement of the button switches sides\n     */\n    segmentChanged(ev: any) {\n        console.log('Segment changed', ev);\n    }\n}\n","import {Kategorie} from './kategorie';\nimport {User} from './user';\n\nexport class Todo {\n    public id: number;\n    public titel: string;\n    public beschreibung: string;\n    public kategorie: Kategorie = new Kategorie('nicht kategorisiert', 'nicht kategorisiert');\n    public autor: User;\n    public erledigt = false;\n    public prioritaet = 2;\n    public zeit: string;\n\n    /*constructor(titel: string, beschreibung: string, kategorie: Kategorie, autor: User) {\n        this.titel = titel;\n        this.beschreibung = beschreibung;\n        this.kategorie = kategorie;\n        this.autor = autor;\n    }*/\n}\n"],"sourceRoot":"webpack:///"}