{"version":3,"sources":["webpack:///src/app/pages/auth/register/register.page.html","webpack:///src/app/pages/auth/register/register-routing.module.ts","webpack:///src/app/pages/auth/register/register.module.ts","webpack:///src/app/pages/auth/register/register.page.scss","webpack:///src/app/pages/auth/register/register.page.ts"],"names":["routes","path","component","RegisterPageRoutingModule","imports","forChild","exports","RegisterPageModule","declarations","RegisterPage","authService","router","todoService","storageService","errors","Map","localStorage","getItem","navigate","nutzername","email","passwort","clear","set","emailIsValid","length","passwortConfirm","size","getUser","todos","presentAlertImportTodos","isLoggedIn","refreshTodos","signUp","importToFirebase","parsStringToObjectArray","user","test","setTimeout","nutzernameRef","setFocus","selector","template"],"mappings":"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","file":"pages-auth-register-register-module-es5.js","sourcesContent":["export default \"<ion-header>\\n    <ion-toolbar>\\n        <ion-buttons slot=\\\"start\\\">\\n            <ion-back-button></ion-back-button>\\n        </ion-buttons>\\n        <ion-title>Registrierung</ion-title>\\n    </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n    <div>\\n        <ng-container>\\n            <ion-list>\\n\\n                <ion-item>\\n                    <ion-label>Nutzername*</ion-label>\\n                    <ion-input #focus\\n                               class=\\\"ion-text-end formControl\\\"\\n                               placeholder=\\\"Nutzername...\\\"\\n                               clearOnEdit=\\\"false\\\"\\n                               [(ngModel)]=\\\"nutzername\\\"\\n                               type=\\\"text\\\"\\n                               required>\\n                    </ion-input>\\n                </ion-item>\\n\\n                <p class=\\\"ion-text-end ion-padding-end\\\" style=\\\"color:var(--ion-color-danger)\\\"\\n                   *ngIf=\\\"errors.get('nutzername')\\\">\\n                    {{errors.get('nutzername')}} </p>\\n\\n\\n                <ion-item>\\n                    <ion-label>E-Mail*</ion-label>\\n                    <ion-input class=\\\"ion-text-end formControl\\\"\\n                               placeholder=\\\"Email...\\\"\\n                               clearOnEdit=\\\"false\\\"\\n                               [(ngModel)]=\\\"email\\\"\\n                               type=\\\"email\\\"\\n                               required>\\n                    </ion-input>\\n                </ion-item>\\n\\n                <p class=\\\"ion-text-end ion-padding-end\\\" style=\\\"color:var(--ion-color-danger)\\\"\\n                   *ngIf=\\\"errors.get('email')\\\">\\n                    {{errors.get('email')}} </p>\\n\\n\\n                <ion-item>\\n                    <ion-label>Passwort*</ion-label>\\n                    <ion-input class=\\\"ion-text-end formControl\\\"\\n                               placeholder=\\\"Passwort...\\\"\\n                               clearOnEdit=\\\"false\\\"\\n                               [(ngModel)]=\\\"passwort\\\"\\n                               type=\\\"password\\\"\\n                               required>\\n                    </ion-input>\\n                </ion-item>\\n\\n                <p class=\\\"ion-text-end ion-padding-end\\\" style=\\\"color:var(--ion-color-danger)\\\"\\n                   *ngIf=\\\"errors.get('passwort')\\\">\\n                    {{errors.get('passwort')}} </p>\\n\\n\\n                <ion-item>\\n                    <ion-label>Passwort bestätigen*</ion-label>\\n                    <ion-input class=\\\"ion-text-end formControl\\\"\\n                               placeholder=\\\"Passwort bestätigen...\\\"\\n                               clearOnEdit=\\\"false\\\"\\n                               [(ngModel)]=\\\"passwortConfirm\\\"\\n                               type=\\\"password\\\"\\n                               required>\\n                    </ion-input>\\n                </ion-item>\\n\\n                <p class=\\\"ion-text-end ion-padding-end\\\" style=\\\"color:var(--ion-color-danger)\\\"\\n                   *ngIf=\\\"errors.get('passwortConfirm')\\\">\\n                    {{errors.get('passwortConfirm')}} </p>\\n            </ion-list>\\n\\n            <ion-note class=\\\"margin\\\">*Pflichtfeld</ion-note>\\n\\n        </ng-container>\\n\\n\\n        <ion-button [title]=\\\"'Registrieren'\\\" (click)=\\\"signUp(nutzername, email, passwort)\\\">Registrieren</ion-button>\\n\\n        <a class=\\\"margin kuis\\\" (click)=\\\"redirectToLogin()\\\">Bereits registriert? Hier einloggen!</a>\\n\\n    </div>\\n</ion-content>\\n\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { RegisterPage } from './register.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: RegisterPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class RegisterPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { RegisterPageRoutingModule } from './register-routing.module';\n\nimport { RegisterPage } from './register.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RegisterPageRoutingModule\n  ],\n  declarations: [RegisterPage]\n})\nexport class RegisterPageModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2F1dGgvcmVnaXN0ZXIvcmVnaXN0ZXIucGFnZS5zY3NzIn0= */\";","import {Component, ViewChild} from '@angular/core';\nimport {IonInput, ViewDidEnter} from '@ionic/angular';\nimport {AuthService} from '../../../../services/auth/auth.service';\nimport {Router} from '@angular/router';\nimport {TodoService} from '../../../../services/todo/todo.service';\nimport {StorageServiceService} from '../../../../services/storage/storage-service.service';\n\n@Component({\n    selector: 'app-register',\n    templateUrl: './register.page.html',\n    styleUrls: ['./register.page.scss'],\n})\nexport class RegisterPage implements ViewDidEnter {\n\n    nutzername: string;\n    email: string;\n    passwort: string;\n    passwortConfirm: string;\n    isOnline: boolean;\n\n    errors: Map<string, string> = new Map<string, string>();\n\n    @ViewChild('focus') private nutzernameRef: IonInput;\n\n    constructor(private authService: AuthService,\n                private router: Router,\n                private todoService: TodoService,\n                private storageService: StorageServiceService) {\n        if (localStorage.getItem('userID')) {\n            this.router.navigate(['/home']);\n        }\n    }\n\n    /**\n     * Method to transmit the data of a new User to the Database.\n     *\n     * @param nutzername is the User nickname.\n     * @param email is the E-Mail of the User.\n     * @param passwort is the password of the user.\n     */\n    async signUp(nutzername, email: string, passwort: string) {\n        this.errors.clear();\n\n        if (!nutzername) {\n            this.errors.set('nutzername', 'Nutzername darf nicht leer sein!');\n        }\n        if (!email) {\n            this.errors.set('email', 'Email darf nicht leer sein!');\n        }\n        if (!this.emailIsValid(email)) {\n            this.errors.set('email', 'Fehlerhaftes Email Format!');\n        }\n        if (passwort.length < 6) {\n            this.errors.set('passwort', 'Passwort muss mindestens 6 Zeichen besitzen!');\n        }\n        if (!passwort) {\n            this.errors.set('passwort', 'Passwort darf nicht leer sein!');\n        }\n        if (passwort !== this.passwortConfirm) {\n            this.errors.set('passwortConfirm', 'Passwörter stimmen nicht überein!');\n        }\n\n        if (this.errors.size === 0) {\n            if (this.authService.getUser()) {\n                if (this.todoService.todos.length > 0) {\n                    await this.todoService.presentAlertImportTodos();\n                }\n                this.authService.isLoggedIn = true;\n                this.todoService.refreshTodos();\n            }\n            await this.authService.signUp(nutzername, email, passwort, () => {});\n            await this.storageService.importToFirebase(StorageServiceService.parsStringToObjectArray(this.authService.user.todos));\n        }\n    }\n\n    /**\n     * Checks if the given String, in this case an E-Mail, has all necessary Symbols, which have to be used.\n     *\n     * @param email is the given String, the users E-Mail.\n     */\n    emailIsValid(email: string) {\n        return /\\S+@\\S+\\.\\S+/.test(email);\n    }\n\n    /**\n     * Redirects the User to the login-page.\n     */\n    redirectToLogin() {\n        this.router.navigate(['/login']);\n    }\n\n    /**\n     * sets the focus on the email input\n     */\n    ionViewDidEnter() {\n        setTimeout(() => this.nutzernameRef.setFocus(), 10);\n    }\n\n}\n"]}